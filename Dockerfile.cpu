# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.10
FROM --platform=linux/amd64 python:${PYTHON_VERSION}-slim

RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    libffi-dev \
    llvm \
    llvm-dev \
    libprotobuf-dev \
    libboost-all-dev \
    libsnappy-dev \
    zlib1g-dev \
    libbz2-dev \
    liblzma-dev \
    && rm -rf /var/lib/apt/lists/*


# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Create a non-privileged user that the app will run under.
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN python -m pip install --upgrade pip && \
    python -m pip install numpy pyarrow numba llvmlite
RUN python -m pip install torch --index-url https://download.pytorch.org/whl/cpu

RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=fcn_2020/,target=fcn_2020/ \
    python -m pip install ./fcn_2020

COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Switch to the non-privileged user to run the application.
USER appuser

# Create a data volume
VOLUME ["/data"]
VOLUME ["/output"]

# Define environment variables
ENV INPUT=""
ENV OUTPUT=""

# # Run the application
# CMD python3 -m fcn_2020 "/data/$INPUT" "/output/$OUTPUT"

# Add an entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"]